%{
	#include "asts.h"

    #include<stdio.h>
    #include<stdlib.h>
    #include<iostream>
    #include<string>




    #ifndef DEBUG
        void dbgprint(const char* fmt, ...) {} // get rid of printf
    #else
        #define dbgprint printf
    #endif


    int yylex();
    extern char* yytext;
    extern int yylineno;
    void yyerror(const char*);
%}

%union {
    StringEntry * se;
    NumericEntry * ne;
    std::string * name;
    idList * names;
	int token;
	paramList * pList;
	IdentifierAST * id;
	ExpressionAST * expAST;
	BinaryExpressionAST * beast;
	AssignmentAST * a;
	ConditionAST * c;
	ConditionalAST * cond;
	WhileLoopAST * w_loop;
	ForLoopAST * f_loop;
	ReadAST * read;
	WriteAST * write;
	StatementListAST * sl;
	FuncDeclAST * fd;
	ProgramAST * prog;
	ControlStatementAST * ctrl;
	int i_val;
	float f_val;
}

%token <i_val> INTLITERAL
%token <f_val> FLOATLITERAL
%token STRINGLITERAL
%token KEYWORD
%token OPERATOR
%token IDENTIFIER
%token PROGRAM
%token _BEGIN
%token END
%token FUNCTION
%token READ
%token WRITE
%token IF
%token ELSE
%token ENDIF
%token WHILE
%token ENDWHILE
%token RETURN
%token INT
%token VOID
%token STRING
%token FLOAT
%token TRUE
%token FALSE
%token FOR
%token ENDFOR
%token CONTINUE
%token BREAK
%token ASSIGN
%token NEQ
%token GEQ
%token LEQ

%error-verbose
%define parse.lac full

%type <prog> program
%type <name> str
%type <id> id
%type <fd> body funcs_decl func_decl
%type <names> id_list id_tail
%type <i_val> param_decl_list param_decl_tail
%type <pList> expr_list expr_list_tail
%type <token> var_type addop mulop compop any_type
%type <sl> func_body stmt_list stmt base_stmt else_part loop_stmt
%type <a> assign_stmt assign_expr init_stmt incr_stmt
%type <read> read_stmt
%type <write> write_stmt
%type <ctrl> control_stmt return_stmt
%type <expAST> postfix_expr call_expr primary
%type <beast> expr expr_prefix factor factor_prefix
%type <cond> if_stmt
%type <c> cond
%type <w_loop> while_stmt
%type <f_loop> for_stmt


%%

program:
    PROGRAM id _BEGIN {startBlock();} body END { endBlock(); showAllTables(); 
							ProgramAST * prog = new ProgramAST($2, $5);
							CodeObject * code = prog->generateCode();
							code->print();
							return 0; }
    ;

id:
    IDENTIFIER
    ;

body:
    decl funcs_decl { $$ = $2; }
    ;

decl:
    string_decl decl {
        // std::cout << "Variable declaration: " << $1->name << " = \"" << $1->value << "\"\n";
        dbgprint("String var\n");
    }
    | var_decl decl { dbgprint("Other var\n"); }
    | %empty
    ;


string_decl:
    STRING id ASSIGN str ';' {
        // $$ = new StringEntry(*$2, *$4);
		scope.back()->addStringEntry($2->id, *$4);
    }
    ;

str:
    STRINGLITERAL
    ;


var_decl:
    var_type id_list ';' {
		scope.back()->addEntry(makeEntries($2, $1 == INT));
	}
    ;

var_type:
    FLOAT
    | INT
    ;

any_type:
    var_type
    | VOID
    ;

id_list:
    id id_tail {
        $$ = new idList();
        $$->name = $1->id;
        $$->next = $2;
    }
    ;

id_tail:
    ',' id id_tail {$$ = new idList(); $$->name = $2->id; $$->next = $3; }
    | %empty { $$ = NULL; }
    ;


param_decl_list:
	param_decl param_decl_tail {$$ = 1 + $2; }
	| %empty { $$ = 0; }
	;

param_decl:
	var_type id { scope.back()->addNumericEntry($2->id, $1 == INT); }
	;

param_decl_tail:
	',' param_decl param_decl_tail {$$ = 1 + $3; }
	| %empty { $$ = 0; }
	;

funcs_decl:
    func_decl funcs_decl {$$ = $1; $$->next = $2;}
    | %empty {$$ = NULL;} 
    ;

func_decl:
	FUNCTION any_type id { startBlock(); } '(' param_decl_list ')' _BEGIN func_body END { $$ = new FuncDeclAST($2, $3, $9, endBlock(), $6); all_funcs->addNumericEntry($3->id, $2 == INT); }
	;

func_body:
	decl stmt_list {$$ = $2;}
	;

stmt_list:
	stmt stmt_list {$$ = $1; $$->next = $2;}
	| %empty {$$ = NULL; }
	;

stmt:
	base_stmt
	| if_stmt { $$ = new StatementListAST($1); }
	| loop_stmt
	;

base_stmt:
	assign_stmt { dbgprint("Made assignment\n"); $$ = new StatementListAST($1); } 
	| read_stmt { dbgprint("Read var\n"); $$ = new StatementListAST($1); }
	| write_stmt { dbgprint("Write var\n"); $$ = new StatementListAST($1); }
	| control_stmt { $$ = new StatementListAST($1); }
	;

assign_stmt:
	assign_expr ';'
	;

assign_expr:
	id ASSIGN expr { $$ = new AssignmentAST($1, $3); }
	;

read_stmt:
	READ '(' id_list ')' ';' { $$ = new ReadAST(verify($3)); }
	;

write_stmt:
	WRITE '('id_list ')' ';' { $$ = new WriteAST(verify($3)); }
	;

return_stmt:
	RETURN expr ';' { $$ = new ControlStatementAST($2); }
	;

/* Expressions */
expr:
	expr_prefix factor { if ($1 == NULL) {$$ = $2;} else {$$ = $1; $$->rhs = $2;}}
	;

expr_prefix:
	expr_prefix factor addop {

		if ($1 != NULL) {
			$1->rhs = $2;
			$$ = new BinaryExpressionAST($3, $1);
		} else {
			$$ = new BinaryExpressionAST($3, $2);
		}
	}
	| %empty { $$ = NULL; }
	;

factor:
	factor_prefix postfix_expr { if ($1 == NULL) {$$ = new BinaryExpressionAST($2);} else {$$ = $1; $$->rhs = $2;}}
	;

factor_prefix:
	factor_prefix postfix_expr mulop {
		if ($1 != NULL) {
			$1->rhs = $2;
			$$ = new BinaryExpressionAST($3, $1);
		} else {
			$$ = new BinaryExpressionAST($3, $2);
		}
	}
	| %empty { $$ = NULL; }
	;

postfix_expr:
	primary
	| call_expr
	;

call_expr:
	id '(' expr_list ')' { $$ = new CallNodeAST($1, $3); }
    ;

expr_list:
	expr expr_list_tail {
		$$ = new paramList();
		$$->cur = $1;
		$$->next = $2;
	}
	| %empty
	;

expr_list_tail:
	',' expr expr_list_tail {$$ = new paramList(); $$->cur = $2; $$->next = $3;}
	| %empty {$$ = NULL;}
	;

primary:
	'(' expr ')' { $$ = $2; }
	| id { verify($1); }
	| INTLITERAL { $$ = new SingleNodeExpressionAST(new LiteralAST($1)); }
	| FLOATLITERAL { $$ = new SingleNodeExpressionAST(new LiteralAST($1)); }
	;

addop:
	'+' { $$ = 0; }
	| '-' { $$ = 1; }
	;

mulop:
	'*' { $$ = 2; }
	| '/' { $$ = 3; }
	;

/* Complex Statements and Condition */
if_stmt:
	IF '(' cond ')' { startBlock(); } decl stmt_list { endBlock(); } else_part ENDIF { $$ = new ConditionalAST($3, $7, $9); }
    ;

else_part:
	ELSE { startBlock(); } decl stmt_list { endBlock(); $$ = $4; }
	| %empty { $$ = NULL; }
	;

cond:
	expr compop expr { $$ = new ConditionAST($2, $1, $3); }
	| TRUE
	| FALSE
	;

compop:
	'<' { $$ = 20; }
	| '>' { $$ = 21; }
	| '=' { $$ = 23; }
	| NEQ { $$ = 22; }
	| LEQ { $$ = 24; }
	| GEQ { $$ = 25; }
	;

while_stmt:
	WHILE '(' cond ')' { startBlock(); } decl stmt_list { endBlock(); }ENDWHILE { $$ = new WhileLoopAST($3, $7); }
    ;

control_stmt:
	return_stmt
	| CONTINUE ';' {$$ = new ControlStatementAST(-2); }
	| BREAK ';' {$$ = new ControlStatementAST(-1); }
	;

loop_stmt:
	while_stmt { $$ = new StatementListAST($1); }
	| for_stmt { $$ = new StatementListAST($1); }
	;

init_stmt:
	assign_expr
	| %empty { $$ = NULL; }
	;

incr_stmt:
	assign_expr
	| %empty { $$ = NULL; }
	;

for_stmt:
	FOR '('
	init_stmt ';'
	cond ';'
	incr_stmt
	')'
	decl stmt_list ENDFOR { $$ = new ForLoopAST($3, $5, $7, $10); }

%%

int yywrap(void)
{
    return 1;
}

void yyerror(const char* s)
{
    printf("Not Accepted\n");
    printf("Error: %s\n", s);
    printf("Token yytext = \n%s (@%d)\n on line %d\n", yytext, *yytext, yylineno);
    exit(-1);
}
